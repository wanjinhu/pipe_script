ADONIS<-adonis(dist~sd$group)
TEST<-ADONIS$aov.tab$`Pr(>F)`[1]
R2adonis<-round(ADONIS$aov.tab$R2[1],digits = 3)
sink('adonis.txt')
print(ADONIS)
sink()
#将PERMANOVA计算结果分别加入到p1和p2的结果图中，保存为pdf格式的文件
xpos<-ggplot_build(p1)$layout$panel_scales_x[[1]]$range$range
ypos<-ggplot_build(p1)$layout$panel_scales_y[[1]]$range$range
pdf("pcoaNotWithLabel.pdf",width = 10)
p1+geom_text(aes(x=xpos[1],y=ypos[2]*1.1),label=paste("PERMANOVA, P","=",TEST,sep = ''),size=6,hjust=0)
dev.off()
xpos<-ggplot_build(p2)$layout$panel_scales_x[[1]]$range$range
ypos<-ggplot_build(p2)$layout$panel_scales_y[[1]]$range$range
pdf("pcoaWithLabel.pdf",width = 10)
p2+geom_text(aes(x=xpos[1],y=ypos[2]*1.1),label=paste("PERMANOVA, P","=",TEST,sep = ''),size=6,hjust=0)
dev.off()
#定义函数
library(picante)       #picante 包加载时默认同时加载 vegan
alpha <- function(x, tree = NULL, base = exp(1)) {
est <- estimateR(x)
Richness <- est[1, ]
Chao1 <- est[2, ]
ACE <- est[4, ]
Shannon <- diversity(x, index = 'shannon', base = base)
Simpson <- diversity(x, index = 'simpson')    #Gini-Simpson 指数
Pielou <- Shannon / log(Richness, base)
goods_coverage <- 1 - rowSums(x == 1) / rowSums(x)
result <- data.frame(Richness, Shannon, Simpson, Pielou, Chao1, ACE, goods_coverage)
if (!is.null(tree)) {
PD_whole_tree <- pd(x, tree, include.root = FALSE)[1]
names(PD_whole_tree) <- 'PD_whole_tree'
result <- cbind(result, PD_whole_tree)
}
result
}
#现在直接使用定义好的命令 alpha()，一步得到多种 Alpha 多样性指数
#加载 OTU 丰度表和进化树文件
otu <- read.delim('../merged_abundance_table_species.txt',
row.names = 1,
sep = '\t',
stringsAsFactors = FALSE,
check.names = FALSE)
otu <- t(otu)
#不包含谱系多样性，无需指定进化树；Shannon 公式的 log 底数我们使用 2
alpha_all <- alpha(otu, base = 2)
#不包含谱系多样性，无需指定进化树；Shannon 公式的 log 底数我们使用 2
alpha_all <- alpha(otu, base = 2)
q
estimateR
?estimateR
#现在直接使用定义好的命令 alpha()，一步得到多种 Alpha 多样性指数
#加载 OTU 丰度表和进化树文件
otu <- read.delim('../merged_abundance_table_species.txt',
row.names = 1,
sep = '\t',
stringsAsFactors = FALSE,
check.names = FALSE)
View(otu)
otu <- t(otu)
View(otu)
estimateR(otu)
#现在直接使用定义好的命令 alpha()，一步得到多种 Alpha 多样性指数
#加载 OTU 丰度表和进化树文件
otu <- read.delim('../merged_abundance_table_species.txt',
row.names = 1,
sep = '\t',
stringsAsFactors = FALSE,
check.names = FALSE)
estimateR(otu)
View(otu)
?diversity
diversity(otu)
otu <- t(otu)
diversity(otu)
diversity(otu,index = simpson)
diversity(otu,index = "simpson")
#定义函数
library(picante)       #picante 包加载时默认同时加载 vegan
alpha <- function(x, tree = NULL, base = exp(1)) {
Shannon <- diversity(x, index = 'shannon', base = base)
Simpson <- diversity(x, index = 'simpson')
result <- data.frame(Shannon, Simpson)
if (!is.null(tree)) {
PD_whole_tree <- pd(x, tree, include.root = FALSE)[1]
names(PD_whole_tree) <- 'PD_whole_tree'
result <- cbind(result, PD_whole_tree)
}
result
}
#现在直接使用定义好的命令 alpha()，一步得到多种 Alpha 多样性指数
#加载 OTU 丰度表和进化树文件
otu <- read.delim('../merged_abundance_table_species.txt',
row.names = 1,
sep = '\t',
stringsAsFactors = FALSE,
check.names = FALSE)
otu <- t(otu)
#不包含谱系多样性，无需指定进化树；Shannon 公式的 log 底数我们使用 2
alpha_all <- alpha(otu, base = 2)
View(alpha)
View(alpha_all)
#现在直接使用定义好的命令 alpha()，一步得到多种 Alpha 多样性指数
#加载 OTU 丰度表和进化树文件
setwd("F:/03-Dipro项目/09-张金萍医生-宏基因组项目-自闭症/analysis/00_alpha/")
#输出保存在本地
write.csv(alpha_all, 'alpha.csv', quote = FALSE)
View(alpha_all)
# --------------------------
# alpha_vilon作图
# --------------------------
library(ggplot2)
library(tidyr)
library(ggpubr)
data <- read.csv("alpha.csv", header = T, check.names = F)
group <- read.table("../group.txt", sep="\t", header = T)
View(data)
View(group)
dataCom<-merge(data,group,by.x='sample', by.y='sample')
View(dataCom)
colDef=c("#dc4c43","#4b8ac0","#e6811d","#228a58","#8e48d8","#6d6d6d")
colnames(dataCom)
# shannon指数
p1 <-
ggplot(dataCom, aes(as.factor(group), Shannon, fill=group)) +
geom_violin(trim = FALSE, color="white") +
stat_boxplot(geom = "errorbar", width = 0.1) +
geom_boxplot(aes(fill = group), width = 0.2, show.legend = F) +
scale_fill_manual(values=colDef) +
theme_bw() +
theme(axis.text.y = element_text(size = 12, face = "plain"),
axis.title.y = element_text(size = 16, face = "plain"),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(y = "Shannon", col = "group") +
stat_compare_means(method = "wilcox.test",
comparisons = list(c('ASD','control')),
label = "p.signif",
label.x = 1.5, label.y = 3.7)
p1
# shannon指数
p1 <-
ggplot(dataCom, aes(as.factor(group), Shannon, fill=group)) +
geom_violin(trim = FALSE, color="white") +
stat_boxplot(geom = "errorbar", width = 0.1) +
geom_boxplot(aes(fill = group), width = 0.2, show.legend = F) +
scale_fill_manual(values=colDef) +
theme_bw() +
theme(axis.text.y = element_text(size = 12, face = "plain"),
axis.title.y = element_text(size = 16, face = "plain"),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(y = "Shannon", col = "group") +
stat_compare_means(method = "wilcox.test",
comparisons = list(c('ASD','control')),
label = "p.signif",
label.x = 1.5, label.y = 7)
p1
# shannon指数
p1 <-
ggplot(dataCom, aes(as.factor(group), Shannon, fill=group)) +
#geom_violin(trim = FALSE, color="white") +
stat_boxplot(geom = "errorbar", width = 0.1) +
geom_boxplot(aes(fill = group), width = 0.2, show.legend = F) +
scale_fill_manual(values=colDef) +
theme_bw() +
theme(axis.text.y = element_text(size = 12, face = "plain"),
axis.title.y = element_text(size = 16, face = "plain"),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(y = "Shannon", col = "group") +
stat_compare_means(method = "wilcox.test",
comparisons = list(c('ASD','control')),
label = "p.signif",
label.x = 1.5, label.y = 7)
p1
# shannon指数
p1 <-
ggplot(dataCom, aes(as.factor(group), Shannon, fill=group)) +
#geom_violin(trim = FALSE, color="white") +
stat_boxplot(geom = "errorbar", width = 0.1) +
geom_boxplot(aes(fill = group), width = 0.2, show.legend = F) +
scale_fill_manual(values=colDef) +
theme_bw() +
theme(axis.text.y = element_text(size = 12, face = "plain"),
axis.title.y = element_text(size = 16, face = "plain"),
axis.title.x = element_text(size = 16, face = "plain"),
axis.text.x = element_text(size = 12, face = "plain"),
axis.ticks.x = element_blank(),
panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(y = "Shannon", col = "group") +
stat_compare_means(method = "wilcox.test",
comparisons = list(c('ASD','control')),
label = "p.signif",
label.x = 1.5, label.y = 7)
p1
# shannon指数
p1 <-
ggplot(dataCom, aes(as.factor(group), Shannon, fill=group)) +
#geom_violin(trim = FALSE, color="white") +
stat_boxplot(geom = "errorbar", width = 0.1) +
geom_boxplot(aes(fill = group), width = 0.2, show.legend = F) +
scale_fill_manual(values=colDef) +
theme_bw() +
theme(axis.text.y = element_text(size = 12, face = "plain"),
axis.title.y = element_text(size = 16, face = "plain"),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12, face = "plain"),
axis.ticks.x = element_blank(),
panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(y = "Shannon", col = "group") +
stat_compare_means(method = "wilcox.test",
comparisons = list(c('ASD','control')),
label = "p.signif",
label.x = 1.5, label.y = 7)
p1
# shannon指数
p1 <-
ggplot(dataCom, aes(as.factor(group), Shannon, fill=group)) +
#geom_violin(trim = FALSE, color="white") +
stat_boxplot(geom = "errorbar", width = 0.1) +
geom_boxplot(aes(fill = group), width = 0.2, show.legend = F) +
scale_fill_manual(values=colDef) +
theme_bw() +
theme(axis.text.y = element_text(size = 12, face = "plain"),
axis.title.y = element_text(size = 16, face = "plain"),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12, face = "plain"),
axis.ticks.x = element_blank(),
panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(y = "Shannon", col = "group") +
stat_compare_means(method = "wilcox.test",
comparisons = list(c('ASD','control')),
label = "p.signif",
label.x = 1.5, label.y = 6.5)
p1
# shannon指数
p1 <-
ggplot(dataCom, aes(as.factor(group), Shannon, fill=group)) +
#geom_violin(trim = FALSE, color="white") +
stat_boxplot(geom = "errorbar", width = 0.1) +
geom_boxplot(aes(fill = group), width = 0.2, show.legend = F) +
scale_fill_manual(values=colDef) +
theme_bw() +
theme(axis.text.y = element_text(size = 12, face = "plain"),
axis.title.y = element_text(size = 16, face = "plain"),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12, face = "plain"),
axis.ticks.x = element_blank(),
panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(y = "Shannon", col = "group") +
stat_compare_means(method = "wilcox.test",
comparisons = list(c('ASD','control')),
label = "p.signif",
label.x = 1.5, label.y = 6.1)
p1
# Simpson指数
p2 <-
ggplot(dataCom, aes(as.factor(group), Simpson, fill=group)) +
# geom_violin(trim = FALSE, color="white") +
stat_boxplot(geom = "errorbar", width = 0.1) +
geom_boxplot(aes(fill = group), width = 0.2, show.legend = F) +
scale_fill_manual(values=colDef) +
theme_bw() +
theme(axis.text.y = element_text(size = 12, face = "plain"),
axis.title.y = element_text(size = 16, face = "plain"),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12, face = "plain"),
axis.ticks.x = element_blank(),
panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(y = "Chao", col = "group") +
stat_compare_means(method = "wilcox.test",
comparisons = list(c('ASD','control')),
label = "p.signif",
label.x = 1.5, label.y = 1)
p2
p <- ggarrange(p1, p2, ncol = 2, nrow = 1)
pdf("alpha_species.pdf",width = 10)
p
dev.off()
library(ggplot2)
library(tidyr)
library(ggpubr)
library(dplyr)
setwd("F:/03-Dipro项目/09-张金萍医生-宏基因组项目-自闭症/analysis/03_diff_compare/")
colDef <- c("#dc4c43","#4b8ac0","#e6811d","#228a58","#8e48d8","#6d6d6d")
data <- read.delim("diff_bacteria_20211208.txt",
sep="\t",
header = T,
check.names = F)
group <- read.table("group_95samples_20211208.txt",
sep="\t",
header = T)
data <- data %>% melt()
colnames(data)[3] <- "sampleID"
ndf <- left_join(data,group,by="sampleID")
ndf$count <- log2(ndf$value)
ndf$count[ndf$group=="HC"] <- ndf$count[ndf$group=="HC"]*-1
order <- data.frame(Genus=ndf$Genus,Species=ndf$Species)
order <- order %>% filter(!duplicated(Species))
ndf$Species <- factor(ndf$Species,levels=rev(order$Species))
legend_order <- order %>% filter(!duplicated(Genus))
ndf$Genus <- factor(ndf$Genus, levels = legend_order$Genus)
p <-
ggplot(ndf)+
geom_boxplot(aes(x=Species,y=count,fill=Genus))+
facet_wrap(~group,scale="free_x")+
coord_flip()+
theme_bw()+
theme(axis.title.y = element_blank(),
axis.text.y = element_text(size = 10, face = "plain"),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 10, face = "plain"),
#panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.placement = "outside")+
guides(fill = guide_legend( ncol = 1, byrow = TRUE))
ggsave("fig2_a_merge_20211208.pdf",p)
p
View(data)
colDef <- c("#dc4c43","#4b8ac0","#e6811d","#228a58","#8e48d8","#6d6d6d")
# 差异细菌双向箱形图
data <- read.delim("diff_species.txt",
sep="\t",
header = T,
check.names = F)
group <- read.table("../group.txt",
sep="\t",
header = T)
data <- data %>% melt()
View(data)
group <- read.table("group.txt",
sep="\t",
header = T)
View(group)
data <- data %>% melt()
View(data)
colDef <- c("#dc4c43","#4b8ac0","#e6811d","#228a58","#8e48d8","#6d6d6d")
# 差异细菌双向箱形图
data <- read.delim("diff_species.txt",
sep="\t",
header = T,
check.names = F)
group <- read.table("group.txt",
sep="\t",
header = T)
data <- data %>% melt()
colnames(data)[3] <- "sampleID"
ndf <- left_join(data,group,by="sampleID")
ndf$count <- log2(ndf$value)
View(ndf)
ndf$count[ndf$group=="ASD"] <- ndf$count[ndf$group=="HC"]*-1
ndf$count[ndf$group=="ASD"] <- ndf$count[ndf$group=="ASD"]*-1
order <- data.frame(Genus=ndf$Genus,Species=ndf$Species)
order <- order %>% filter(!duplicated(Species))
ndf$Species <- factor(ndf$Species,levels=rev(order$Species))
legend_order <- order %>% filter(!duplicated(Genus))
ndf$Genus <- factor(ndf$Genus, levels = legend_order$Genus)
p <-
ggplot(ndf)+
geom_boxplot(aes(x=Species,y=count,fill=Genus))+
facet_wrap(~group,scale="free_x")+
coord_flip()+
theme_bw()+
theme(axis.title.y = element_blank(),
axis.text.y = element_text(size = 10, face = "plain"),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 10, face = "plain"),
#panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.placement = "outside")+
guides(fill = guide_legend( ncol = 1, byrow = TRUE))
p
colDef <- c("#dc4c43","#4b8ac0","#e6811d","#228a58","#8e48d8","#6d6d6d")
# 差异细菌双向箱形图
data <- read.delim("diff_species.txt",
sep="\t",
header = T,
check.names = F)
group <- read.table("group.txt",
sep="\t",
header = T)
data <- data %>% melt()
colnames(data)[3] <- "sampleID"
ndf <- left_join(data,group,by="sampleID")
ndf$count <- log2(ndf$value)
ndf$count[ndf$group=="ASD"] <- ndf$count[ndf$group=="ASD"]*-1
order <- data.frame(Genus=ndf$Genus,Species=ndf$Species)
order <- order %>% filter(!duplicated(Species))
ndf$Species <- factor(ndf$Species,levels=rev(order$Species))
legend_order <- order %>% filter(!duplicated(Genus))
ndf$Genus <- factor(ndf$Genus, levels = legend_order$Genus)
colDef <- c("#dc4c43","#4b8ac0","#e6811d","#228a58","#8e48d8","#6d6d6d")
# 差异细菌双向箱形图
data <- read.delim("diff_species.txt",
sep="\t",
header = T,
check.names = F)
group <- read.table("group.txt",
sep="\t",
header = T)
data <- data %>% melt()
colnames(data)[3] <- "sampleID"
ndf <- left_join(data,group,by="sampleID")
View(ndf)
result <- ifelse(ndf$value == 0, ndf$value, log2(ndf$value))
result
ndf$count <- log2(ndf$value)
result <- ifelse(ndf$value == 0, ndf$value, -log2(ndf$value))
result
ndf$count <- ifelse(ndf$value == 0, ndf$value, log10(ndf$value))
ndf$count <- ifelse(ndf$value == 0, ndf$value, ndf$value)
# ndf$count <- log2(ndf$value)
ndf$count[ndf$group=="ASD"] <- ndf$count[ndf$group=="ASD"]*-1
order <- data.frame(Genus=ndf$Genus,Species=ndf$Species)
order <- order %>% filter(!duplicated(Species))
ndf$Species <- factor(ndf$Species,levels=rev(order$Species))
legend_order <- order %>% filter(!duplicated(Genus))
ndf$Genus <- factor(ndf$Genus, levels = legend_order$Genus)
p <-
ggplot(ndf)+
geom_boxplot(aes(x=Species,y=count,fill=Genus))+
facet_wrap(~group,scale="free_x")+
coord_flip()+
theme_bw()+
theme(axis.title.y = element_blank(),
axis.text.y = element_text(size = 10, face = "plain"),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 10, face = "plain"),
#panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.placement = "outside")+
guides(fill = guide_legend( ncol = 1, byrow = TRUE))
p
ggsave("diff_species.pdf",p)
setwd("F:/03-Dipro项目/09-张金萍医生-宏基因组项目-自闭症/analysis/00_alpha/")
data <- read.csv("alpha.csv", header = T, check.names = F)
group <- read.table("../group.txt", sep="\t", header = T)
dataCom<-merge(data,group,by.x='sample', by.y='sample')
colDef=c("#dc4c43","#4b8ac0","#e6811d","#228a58","#8e48d8","#6d6d6d")
# shannon指数
p1 <-
ggplot(dataCom, aes(as.factor(group), Shannon, fill=group)) +
# geom_violin(trim = FALSE, color="white") +
stat_boxplot(geom = "errorbar", width = 0.1) +
geom_boxplot(aes(fill = group), width = 0.2, show.legend = F) +
scale_fill_manual(values=colDef) +
theme_bw() +
theme(axis.text.y = element_text(size = 12, face = "plain"),
axis.title.y = element_text(size = 16, face = "plain"),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12, face = "plain"),
axis.ticks.x = element_blank(),
panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(y = "Shannon", col = "group") +
stat_compare_means(method = "wilcox.test",
comparisons = list(c('ASD','control')),
label = "p.signif",
label.x = 1.5, label.y = 6.1)
# Simpson指数
p2 <-
ggplot(dataCom, aes(as.factor(group), Simpson, fill=group)) +
# geom_violin(trim = FALSE, color="white") +
stat_boxplot(geom = "errorbar", width = 0.1) +
geom_boxplot(aes(fill = group), width = 0.2, show.legend = F) +
scale_fill_manual(values=colDef) +
theme_bw() +
theme(axis.text.y = element_text(size = 12, face = "plain"),
axis.title.y = element_text(size = 16, face = "plain"),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12, face = "plain"),
axis.ticks.x = element_blank(),
panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(y = "Simpson", col = "group") +
stat_compare_means(method = "wilcox.test",
comparisons = list(c('ASD','control')),
label = "p.signif",
label.x = 1.5, label.y = 1)
p <- ggarrange(p1, p2, ncol = 2, nrow = 1)
pdf("alpha_species.pdf",width = 10)
pdf("alpha_species.pdf",width = 10)
p
dev.off()
